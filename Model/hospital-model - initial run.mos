model Hospital_Bed_Assignment
  uses "mmxprs"

  !============================
  !-------- Parameters -------
  !===========================

  parameters

    !Setting benefits for assignment, is the base value
    Benefit_assignment = 10

    !Penalty for the mismatch of requested unit and assigned unit
    Penalty_patient_unit_mismatch = 4

    !Penalty for the mismatch of requested bed type and assigned bed type
    Penalty_patient_bed_mismatch = 4

    !Penalty for the overcrowding of units
    Penalty_overcrowding = 4

    !Penalty for a the number of transfers over the maximum
    Penalty_transfers = 4

    !Matching units and patiens as hard or soft constraint? 1=hard, 0=soft
    Hard_cons_patient_unit = 0

    !Matching beds and patients as hard or soft constraint? 1=hard, 0=soft
    Hard_cons_patient_bed = 0

    !Avoiding overcrowding at a certain unit as hard or soft constraint? 1=hard, 0=soft
    Hard_cons_overcrowding = 0

    !Avoiding to many patient transfers as hard or soft constraint? 1=hard, 0=soft
    Hard_cons_transfers = 0

    !maximal fraction of assignments that can change from the previous run
    limit_patient_transfer = 0.1

  end-parameters

  declarations


    !==========================
    ! ----- Index sets --------
    !==========================

    !Hospital structure
    departments: set of string
    units: set of string
    rooms: set of string
    beds: set of string

    !Bed requests / patients
    patients: set of string

    !Patient type / bed type
    types: set of string


    !=========================
    ! ------ Data sets -------
    !=========================

    !Defining the belonging of units to departments
    units_in_department: array(departments) of list of string !Set of units belonging to department d

    !Defining the belonging of beds to rooms and units
    beds_in_unit: array(units) of list of string !Set of beds belonging to unit u
    beds_in_room: array(rooms) of list of string !Set of beds belonging to room r

    !Defining the belonging of requests (patients) to a certain unit (clinical specialty)
    patients_of_unit: array(units) of list of string !Set of patients belonging to unit u

    !Defining the bed type a patient requets
    patients_of_type: array(types) of list of string !Set of patients belonging to type t

    !Assignemnt parameter whether bed b was assigned to patient p in the previous run
    previous_assignment: array(patients, beds) of integer

    !If there is no space in a unit which is the next most suitable unit? Suitability of a unit for patients from another unit
    tier: array(units, units) of integer !Tier levels ranging from 1 to 3 (1 is good, 3 is bad)

    !Nurse/patient ratio at unit
    max_patients_per_unit: array(units) of real

    !==============================
    ! ------ Auxiliary data set ---
    !==============================

    !Mapping of bed to unit. In which unit lies bed b?
    unit_of_bed: array(beds) of string

    !Array of binaries: Is bed b a bed of type t?
    binary_bed_type: array(beds, types) of integer


    !=========================
    ! ------ Variables ------
    !=========================

    !====== Decision variables ================

    !Decision variables: Assigning bed request(patient) to bed
    x: array(patients, beds) of mpvar

    !====== Indicator variables ===========================

    !Indicator variable whether a patient is transfered from one bed to another within two consecutive runs
    delta: array(patients) of mpvar

    !====== Variables which capture the deviation of a constraint ==============

    !Deviation of the tier level of the assigned unit to the optimal unit. E.g. patient got assigned a tier 3 unit: dev = 3-1=2
    dev_unit: array(patients) of mpvar

    !Deviation of the assigned bed from the patients request, 0= fulfiled, 1=unfulfiled, for each request (type)
    dev_bed: array(patients, types) of mpvar

    !Deviation of the patients from the max number of patients allowed in a unit, e.g. 30 patients, 28 allowed, dev = 30-28=2
    dev_staff: array(units) of mpvar

    !Deviation from the max allowed number of patients which get trasnfereed, e.g. 30 patients got transferred but only 20 were allowed: dev = 10
    dev_transfer: mpvar

  end-declarations

  !===================================================
  !============ Load data from data file ===============
  !===================================================

  initialisations from "hospital-data - initial run.dat"
	  types departments units rooms beds patients
	  units_in_department beds_in_unit beds_in_room
	  patients_of_unit patients_of_type
	  tier max_patients_per_unit
	  unit_of_bed  binary_bed_type
  end-initialisations

  !=========================================
  ! ----- Defining variable types ----------
  !=========================================

  forall(p in patients) forall (b in beds)
    x(p, b) is_binary
  forall(p in patients)
    delta(p) is_binary
  forall(p in patients)
    dev_unit(p) is_integer
  forall(p in patients) forall(t in types)
    dev_bed(p,t) is_integer
  forall(u in units)
    dev_staff(u) is_integer
  dev_transfer is_integer

  !========================================
  ! ------- Objective function ------------
  !=======================================


  !Number of patients which got assigned a bed
  assigned_patients:= sum(p in patients) sum(b in beds) x(p, b)

  !Total mismatch of assigned units and requested units over all patients
  patient_unit_mismatch := sum(p in patients) dev_unit(p)

  !Total mismatch of assigned beds and requested beds over all patients
  patient_bed_mismatch := sum(p in patients) sum(t in types) dev_bed(p,t)

  !Sum of overcrowdings over all units
  overcrowding := sum(u in units) dev_staff(u)

  !Number of transfers - allowed number of transfers
  additional_transfers := dev_transfer

  !==== Objective function ================
  objective := Benefit_assignment * assigned_patients - Penalty_patient_unit_mismatch * patient_unit_mismatch - Penalty_patient_bed_mismatch * patient_bed_mismatch - Penalty_overcrowding * overcrowding  - Penalty_transfers * additional_transfers

  !==========================================
  ! ------ Constraints ---------------------
  !=========================================

  !============ Core constraints ===========

  !Patient-assignment: Assign a patient to only one bed
  forall(p in patients) sum(b in beds) x(p,b) <= 1

  !Bed-Assignment: Assign a bed to only one patient
  forall(b in beds) sum(p in patients) x(p,b) <= 1

  !========================================

  !============= Match patient and bed/unit constraints ====

  !Try to assign patient to apprporiate unit (use tier levels)
  forall(u in units) forall(p in patients_of_unit(u)) sum(b in beds) tier(u,unit_of_bed(b)) * x(p,b) <= 1 + dev_unit(p)

  !Try to assign patient to the right bed / room
  forall (t in types) forall(p in patients_of_type(t)) forall(b in beds) binary_bed_type(b,t) - x(p,b) >= 0 - dev_bed(p,t)

  !=========================================================

  !=============== Operational constraints ===============

  !Meet staff-to-patient ratio requirements
  forall(u in units) sum(b in beds_in_unit(u)) sum(p in patients) x(p,b) <= max_patients_per_unit(u) + dev_staff(u)

  !=======================================================

  !============ Assignment stabilty constraint set =========

  !Number of patients in the old run
  !num_old_patients:= sum(p in patients) sum(b in beds) previous_assignment(p,b)

  !Number of patients in the new run
  !num_new_patients:= getsize(patients) - num_old_patients

  !Is patient p assigned a new bed?
  !forall(p in patients) forall(b in beds) delta(p) >= previous_assignment(p,b) - x(p,b)

  !Assignment-stability: Only a specified fraction of assignments from previous run can change (i.e. old patients transferred)
  !sum(p in patients) delta(p) - num_new_patients <= limit_patient_transfer * num_old_patients + dev_transfer

  !===========================================================

  !========= Setting constraints as hard or soft ============

  !Setting the allowed deviation form the aimed value at zero if "Hard_cons = 1"
  forall(p in patients) dev_unit(p) <= 10 * (1-Hard_cons_patient_unit)
  forall(p in patients) forall(t in types) dev_bed(p,t) <= 10 * (1-Hard_cons_patient_bed)
  forall(u in units) dev_staff(u) <= 100 * (1-Hard_cons_overcrowding)
  dev_transfer <= 1000 * (1-Hard_cons_transfers)

  !Deviation is always greater equal zero
  forall(p in patients) dev_unit(p) >= 0
  forall(p in patients) forall(t in types) dev_bed(p,t) >= 0
  forall(u in units) dev_staff(u) >= 0
  dev_transfer >= 0

  !==========================================================


  !=================================================
  !--------- Solve model and output ----------------
  !=================================================

  !Solve statement
  maximise(objective)

  ! ------ Output --------

  !problem solved?
  writeln("------------------")
  if (getprobstat = XPRS_OPT) then
    writeln("Optimization problem solved.")
    writeln("Objective value: ", getobjval)
    writeln("Assigned patients: ", getsol(assigned_patients))
    writeln("Patient unit mismatch: ", getsol(patient_unit_mismatch))
    writeln("Patient bed mismatch: ", getsol(patient_bed_mismatch))
    forall(t in types) writeln(strfmt(t, 20), strfmt( sum(p in patients) getsol(dev_bed(p,t)) , 10))
    writeln("Overcrowding of units: ", getsol(overcrowding))
    writeln("Additional transfers: ", getsol(additional_transfers))
  else
    writeln("Not solved to optimality. DO NOT TRUST RESULTS!")
  end-if

  !output results
  writeln("")
  writeln("-------------------------")
  writeln("")
  writeln(strfmt("Patient",10), strfmt("Bed",7), strfmt("Assignment changed?",24))
  forall(p in patients) forall(b in beds) do
      if (getsol(x(p,b)) = 1) then
        writeln(strfmt(p,8), ",", strfmt(b,9), "," ) !strfmt(getsol(delta(p)),18)
      end-if
    end-do
  forall(p in patients) do
      if (sum(b in beds) getsol(x(p,b)) = 0) then
        writeln(strfmt(p,8), strfmt("unassigned",16), strfmt(getsol(delta(p)),11) )
      end-if
    end-do
  writeln("")
  writeln("-------------------------")
  writeln("")

end-model
